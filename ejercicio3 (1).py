# -*- coding: utf-8 -*-
"""Ejercicio3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewKmBIDik6unhOls9SYsuEwXW-Ctds4Q
"""

#   Codigo que implementa el esquema numerico
#   de interpolacion para determinar la raiz de
#   una ecuacion
#
#           Autor:
#   Angel Gilberto Carbajal Lopez
#   carbajalsecundaria@gmail.com
#   Version 1.0 : 11/02/2025
#
import numpy as np
import matplotlib.pyplot as plt

#Función
def f(x):
    return np.exp(-x) - x  #Nueva ecuación

#Interpolación de Lagrange
def lagrange_interpolation(x, x_puntos, y_puntos):
    P_Interpolacion = len(x_puntos)  #Número de puntos de interpolación
    Resultado = 0  #Inicializar el o los resultados
    for Iteracion_i in range(P_Interpolacion):
        termino_Lag = y_puntos[Iteracion_i]  #Inicializar el término de Lagrange
        for Iteracion_j in range(P_Interpolacion):
            if Iteracion_i != Iteracion_j:
                termino_Lag *= (x - x_puntos[Iteracion_j]) / (x_puntos[Iteracion_i] - x_puntos[Iteracion_j])
        Resultado += termino_Lag
    return Resultado

#Método de Bisección
def bisect(func, a, b, tol=1e-6, max_iter=100):
    if func(a) * func(b) > 0:
        raise ValueError("El intervalo no contiene una raíz")

    for _ in range(max_iter):
        c = (a + b) / 2
        if abs(func(c)) < tol or (b - a) / 2 < tol:
            return c
        if func(a) * func(c) < 0:
            b = c
        else:
            a = c
    return (a + b) / 2  #Retorna la mejor estimación de la raíz

#Selección de cuatro puntos de interpolación
x_points = np.array([0.0, 0.3, 0.6, 1.0])  # Cuatro puntos en el intervalo [0,1]
y_points = f(x_points)

#Construcción del polinomio interpolante
x_vals = np.linspace(0, 1, 100)
y_interp = [lagrange_interpolation(x, x_points, y_points) for x in x_vals]

#Encontrar raíz del polinomio interpolante usando bisección
root = bisect(lambda x: lagrange_interpolation(x, x_points, y_points), 0, 1)

#Calcular errores
errores_absolutos = np.abs(y_interp - f(x_vals))
errores_relativos = errores_absolutos / np.where(np.abs(f(x_vals))==0, 1, np.abs(f(x_vals)))
errores_cuadraticos = errores_absolutos**2

#Impresion iteraciones
print(f"{'Iteración':<10}|{'x':<12}|{'Error absoluto':<18}|{'Error relativo':<18}|{'Error cuadrático'}")
print("-" * 80)
for i, (x_val, error_abs, error_rel, error_cuad) in enumerate(zip(x_vals, errores_absolutos, errores_relativos, errores_cuadraticos)):
    print(f"{i+1:<10}|{x_val:<12.6f}|{error_abs:<18.6e}|{error_rel:<18.6e}|{error_cuad:.6e}")

#Gráficas de errores
fig, ax = plt.subplots(1, 2, figsize=(14, 5))
ax[0].plot(x_vals, errores_absolutos, label="Error Absoluto", color='purple')
ax[0].plot(x_vals, errores_relativos, label="Error Relativo", color='orange')
ax[0].plot(x_vals, errores_cuadraticos, label="Error Cuadrático", color='brown')
ax[0].set_xlabel("x")
ax[0].set_ylabel("Errores")
ax[0].legend()
ax[0].grid(True)

#Gráfica
ax[1].plot(x_vals, f(x_vals), label="f(x) = e^(-x) - x", linestyle='dashed', color='blue')
ax[1].plot(x_vals, y_interp, label="Interpolación de Lagrange", color='red')
ax[1].axhline(0, color='black', linewidth=0.5, linestyle='--')
ax[1].axvline(root, color='green', linestyle='dotted', label=f"Raíz aproximada: {root:.4f}")
ax[1].scatter(x_points, y_points, color='black', label="Puntos de interpolación")
ax[1].set_xlabel("x")
ax[1].set_ylabel("f(x)")
ax[1].set_title("Interpolación y búsqueda de raíces")
ax[1].legend()
ax[1].grid(True)
plt.savefig("interpolacion_raices.png")
plt.show()

#Imprimir la raíz encontrada
print(f"La raíz aproximada usando interpolación es: {root:.4f}")